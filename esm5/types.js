import { __decorate } from "tslib";
import { Injectable } from "@angular/core";
/**
 * Additional options that can be passed to tryLogin.
 */
var LoginOptions = /** @class */ (function () {
    function LoginOptions() {
        /**
         * Normally, you want to clear your hash fragment after
         * the lib read the token(s) so that they are not displayed
         * anymore in the url. If not, set this to true. For code flow
         * this controls removing query string values.
         */
        this.preventClearHashAfterLogin = false;
    }
    return LoginOptions;
}());
export { LoginOptions };
/**
 * Defines the logging interface the OAuthService uses
 * internally. Is compatible with the `console` object,
 * but you can provide your own implementation as well
 * through dependency injection.
 */
var OAuthLogger = /** @class */ (function () {
    function OAuthLogger() {
    }
    return OAuthLogger;
}());
export { OAuthLogger };
/**
 * Defines a simple storage that can be used for
 * storing the tokens at client side.
 * Is compatible to localStorage and sessionStorage,
 * but you can also create your own implementations.
 */
var OAuthStorage = /** @class */ (function () {
    function OAuthStorage() {
    }
    return OAuthStorage;
}());
export { OAuthStorage };
var MemoryStorage = /** @class */ (function () {
    function MemoryStorage() {
        this.data = new Map();
    }
    MemoryStorage.prototype.getItem = function (key) {
        return this.data.get(key);
    };
    MemoryStorage.prototype.removeItem = function (key) {
        this.data.delete(key);
    };
    MemoryStorage.prototype.setItem = function (key, data) {
        this.data.set(key, data);
    };
    MemoryStorage = __decorate([
        Injectable()
    ], MemoryStorage);
    return MemoryStorage;
}());
export { MemoryStorage };
/**
 * Represents the received tokens, the received state
 * and the parsed claims from the id-token.
 */
var ReceivedTokens = /** @class */ (function () {
    function ReceivedTokens() {
    }
    return ReceivedTokens;
}());
export { ReceivedTokens };
//# sourceMappingURL=data:application/json;base64,